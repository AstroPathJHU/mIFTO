ggplot2::aes(
ymin = Signal - sd.Signal, ymax = Signal + sd.Signal,
color = 'red4'
), width =  conc_width, size=.40, alpha=.65
) +
#
# display
#
ggplot2::labs(
title = titl, x =  xtitl, y = ytitl
) +
ggplot2::scale_color_manual(
name = '',values = colvals, labels = collbls
) +
ggplot2::coord_cartesian(
xlim = xcoords, ylim = c(-5,Max), expand = F
) +
ggplot2::scale_y_continuous(
breaks=seq(0,100,5)
) +
x_scal +
theme1 + ggplot2::theme(
legend.position = c(.85,.85)
) +
ggplot2::theme(
plot.margin = ggplot2::margin(
t = 20, r = 20, b = 20, l = 20, unit = "pt"
)
)
devtools::load_all()
graph.out <- mIFTO::create.my.theme(Antibody_Opal)
theme1 <- graph.out$theme1
colors <- graph.out$colors
Antibody_Opal.snratio <- graph.out$Antibody_Opal.snratio
Antibody_Opal.ttest <- graph.out$Antibody_Opal.ttest
con_type <- 'factor'
#
###############################generate plots#########################
#
if (ihc.logical){
mIFTO::doupdate.pgbar(
90, pb.Object, 'Write out the fractions tables and make IHC vs IF graph')
} else {
mIFTO::doupdate.pgbar(90, pb.Object, 'Write out the fractions tables')
}
#
ihc.plots <- mIFTO::write.fracs(
wd, Antibody_Opal, Slide_Descript, Concentration, Tables$Tables.byimage,
Thresholds, connected.pixels, ihc.logical, ihc.Thresholds,
ihc.connected.pixels, folders.px, theme1
)
if (!ihc.plots$err.val == 0){
return(list(err.val = ihc.plots$err.val))
}
ihc.plots <- list(ihc.plots$ihc.graphs)
#
mIFTO::doupdate.pgbar(92, pb.Object,
'Generating Signal-to-Noise Ratio Graphs')
#
sn.plots <- map.snratio.plots(
wd, Antibody_Opal, Slide_Descript,
Concentration, Tables$Tables.byimage,
Antibody_Opal.snratio, theme1, con_type
)
#
mIFTO::doupdate.pgbar(93, pb.Object, 'Generating t-Test Graphs')
#
tplots <- map.ttest.plots(
wd, Antibody_Opal, Slide_Descript,
Concentration, Tables$Tables.byimage,
Antibody_Opal.ttest, theme1, colors, con_type
)
#
mIFTO::doupdate.pgbar(94, pb.Object, 'Generating Boxplots')
#
bx.plots <- map.boxplots.plots(
wd, Antibody_Opal, Slide_Descript,
Concentration, Tables$Tables.wholeslide,
theme1, colors, con_type
)
#
# print some graphs
#
mIFTO::doupdate.pgbar(95, pb.Object, 'Printing Graphs')
#
# pull names vectors together
#
lbl <- "Welch's t Test Graphs"
lbl2 <- paste0(
"Measures the difference between signal and noise accounting for ",
"variation. Higher values indicate more separation.")
#
sn.plots.l <- (length(Slide_Descript) + 1)
lbl <- c(lbl, rep("Mean S/N Ratio Graphs",
ceiling(sn.plots.l/ 4)))
lbl <- c(lbl, rep("Median S/N Ratio Graphs",
ceiling(sn.plots.l/ 4)))
lbl2 <- c(lbl2, rep(paste0(
"Measures the difference between signal and noise using a simple ratio.",
" Higher values indicate more separation."),
2*ceiling(sn.plots.l/ 4)))
#
bx.plots.l <- (length(Slide_Descript))
lbl <- c(lbl, rep("Boxplots of Signal and Noise",
ceiling(bx.plots.l/ 4)))
lbl <- c(lbl, rep("Boxplots of 95th %-tile of Signal and 5th %-tile of Noise",
ceiling(bx.plots.l/ 4)))
lbl <- c(lbl, rep("Boxplots of 99th %-tile of Signal and 1st %-tile of Noise",
ceiling(bx.plots.l/ 4)))
lbl2 <- c(lbl2, rep(paste0(
'Measures the normalized flourescence intensity (NFI) or "counts" ',
'distribution of the signal and noise, these plots are useful to evaluate \n',
'the TSA dilution series. When optimizing a panel, balance the counts ',
'across the opals to establish accurate unmixing and prevent \n',
'crosstalk (bleedthrough) between opals. Values are computed from the ',
'thresholded signal and noise of all images across a case.'),
3*ceiling(bx.plots.l/ 4)))
#
plots <- c(tplots, sn.plots, bx.plots)
#
lbl.ihc <-  'IHC to IF Comparison Graph'
lbl2.ihc <- paste0(
'Compare the fraction of positivity of each IF dilution to the ',
'fraction of positivity from the IHC in order to determine when loss of ',
'signal occurs.'
)
#
glist <- list()
#
glist <- c(
glist,
mIFTO::m.grid.arrange(
ihc.plots,lbl.ihc,
lbl2.ihc, 3, 0, (ceiling(length(plots))/4 + 1)
)
)
glist <- c(
glist,
mIFTO::m.grid.arrange(
plots, lbl, lbl2, 1, 1, (ceiling(length(plots))/4 + 1)
)
)
gout <- gridExtra::marrangeGrob(grobs=glist,nrow=1,ncol=1,top=NULL)
#
str = paste0(wd,'/Results.pixels/stats/graphs/',
'Graphs for ', Antibody_Opal)
#
ggplot2::ggsave(paste0(str,'.pdf'),gout,
height = 9, width = 8.5, units = 'in', scale = 1, dpi = 300)
#
1.2 / 6
seq(0, y_top, )
y_top
y_top -> 1.2
y_top <- 1.2
round(1.2132, 1)
?round
.15 / 6
digits(.15)
signif(.15, 2)
signif(.15, 3)
signif(.15, 1)
devtools::load_all()
graph.out <- mIFTO::create.my.theme(Antibody_Opal)
theme1 <- graph.out$theme1
colors <- graph.out$colors
Antibody_Opal.snratio <- graph.out$Antibody_Opal.snratio
Antibody_Opal.ttest <- graph.out$Antibody_Opal.ttest
con_type <- 'factor'
#
###############################generate plots#########################
#
if (ihc.logical){
mIFTO::doupdate.pgbar(
90, pb.Object, 'Write out the fractions tables and make IHC vs IF graph')
} else {
mIFTO::doupdate.pgbar(90, pb.Object, 'Write out the fractions tables')
}
#
ihc.plots <- mIFTO::write.fracs(
wd, Antibody_Opal, Slide_Descript, Concentration, Tables$Tables.byimage,
Thresholds, connected.pixels, ihc.logical, ihc.Thresholds,
ihc.connected.pixels, folders.px, theme1
)
if (!ihc.plots$err.val == 0){
return(list(err.val = ihc.plots$err.val))
}
ihc.plots <- list(ihc.plots$ihc.graphs)
#
mIFTO::doupdate.pgbar(92, pb.Object,
'Generating Signal-to-Noise Ratio Graphs')
#
sn.plots <- map.snratio.plots(
wd, Antibody_Opal, Slide_Descript,
Concentration, Tables$Tables.byimage,
Antibody_Opal.snratio, theme1, con_type
)
#
mIFTO::doupdate.pgbar(93, pb.Object, 'Generating t-Test Graphs')
#
tplots <- map.ttest.plots(
wd, Antibody_Opal, Slide_Descript,
Concentration, Tables$Tables.byimage,
Antibody_Opal.ttest, theme1, colors, con_type
)
#
mIFTO::doupdate.pgbar(94, pb.Object, 'Generating Boxplots')
#
bx.plots <- map.boxplots.plots(
wd, Antibody_Opal, Slide_Descript,
Concentration, Tables$Tables.wholeslide,
theme1, colors, con_type
)
#
# print some graphs
#
mIFTO::doupdate.pgbar(95, pb.Object, 'Printing Graphs')
#
# pull names vectors together
#
lbl <- "Welch's t Test Graphs"
lbl2 <- paste0(
"Measures the difference between signal and noise accounting for ",
"variation. Higher values indicate more separation.")
#
sn.plots.l <- (length(Slide_Descript) + 1)
lbl <- c(lbl, rep("Mean S/N Ratio Graphs",
ceiling(sn.plots.l/ 4)))
lbl <- c(lbl, rep("Median S/N Ratio Graphs",
ceiling(sn.plots.l/ 4)))
lbl2 <- c(lbl2, rep(paste0(
"Measures the difference between signal and noise using a simple ratio.",
" Higher values indicate more separation."),
2*ceiling(sn.plots.l/ 4)))
#
bx.plots.l <- (length(Slide_Descript))
lbl <- c(lbl, rep("Boxplots of Signal and Noise",
ceiling(bx.plots.l/ 4)))
lbl <- c(lbl, rep("Boxplots of 95th %-tile of Signal and 5th %-tile of Noise",
ceiling(bx.plots.l/ 4)))
lbl <- c(lbl, rep("Boxplots of 99th %-tile of Signal and 1st %-tile of Noise",
ceiling(bx.plots.l/ 4)))
lbl2 <- c(lbl2, rep(paste0(
'Measures the normalized flourescence intensity (NFI) or "counts" ',
'distribution of the signal and noise, these plots are useful to evaluate \n',
'the TSA dilution series. When optimizing a panel, balance the counts ',
'across the opals to establish accurate unmixing and prevent \n',
'crosstalk (bleedthrough) between opals. Values are computed from the ',
'thresholded signal and noise of all images across a case.'),
3*ceiling(bx.plots.l/ 4)))
#
plots <- c(tplots, sn.plots, bx.plots)
#
lbl.ihc <-  'IHC to IF Comparison Graph'
lbl2.ihc <- paste0(
'Compare the fraction of positivity of each IF dilution to the ',
'fraction of positivity from the IHC in order to determine when loss of ',
'signal occurs.'
)
#
glist <- list()
#
glist <- c(
glist,
mIFTO::m.grid.arrange(
ihc.plots,lbl.ihc,
lbl2.ihc, 3, 0, (ceiling(length(plots))/4 + 1)
)
)
glist <- c(
glist,
mIFTO::m.grid.arrange(
plots, lbl, lbl2, 1, 1, (ceiling(length(plots))/4 + 1)
)
)
gout <- gridExtra::marrangeGrob(grobs=glist,nrow=1,ncol=1,top=NULL)
#
str = paste0(wd,'/Results.pixels/stats/graphs/',
'Graphs for ', Antibody_Opal)
#
ggplot2::ggsave(paste0(str,'.pdf'),gout,
height = 9, width = 8.5, units = 'in', scale = 1, dpi = 300)
#
devtools::load_all()
graph.out <- mIFTO::create.my.theme(Antibody_Opal)
theme1 <- graph.out$theme1
colors <- graph.out$colors
Antibody_Opal.snratio <- graph.out$Antibody_Opal.snratio
Antibody_Opal.ttest <- graph.out$Antibody_Opal.ttest
con_type <- 'factor'
#
###############################generate plots#########################
#
if (ihc.logical){
mIFTO::doupdate.pgbar(
90, pb.Object, 'Write out the fractions tables and make IHC vs IF graph')
} else {
mIFTO::doupdate.pgbar(90, pb.Object, 'Write out the fractions tables')
}
#
ihc.plots <- mIFTO::write.fracs(
wd, Antibody_Opal, Slide_Descript, Concentration, Tables$Tables.byimage,
Thresholds, connected.pixels, ihc.logical, ihc.Thresholds,
ihc.connected.pixels, folders.px, theme1
)
if (!ihc.plots$err.val == 0){
return(list(err.val = ihc.plots$err.val))
}
ihc.plots <- list(ihc.plots$ihc.graphs)
#
mIFTO::doupdate.pgbar(92, pb.Object,
'Generating Signal-to-Noise Ratio Graphs')
#
sn.plots <- map.snratio.plots(
wd, Antibody_Opal, Slide_Descript,
Concentration, Tables$Tables.byimage,
Antibody_Opal.snratio, theme1, con_type
)
#
mIFTO::doupdate.pgbar(93, pb.Object, 'Generating t-Test Graphs')
#
tplots <- map.ttest.plots(
wd, Antibody_Opal, Slide_Descript,
Concentration, Tables$Tables.byimage,
Antibody_Opal.ttest, theme1, colors, con_type
)
#
mIFTO::doupdate.pgbar(94, pb.Object, 'Generating Boxplots')
#
bx.plots <- map.boxplots.plots(
wd, Antibody_Opal, Slide_Descript,
Concentration, Tables$Tables.wholeslide,
theme1, colors, con_type
)
#
# print some graphs
#
mIFTO::doupdate.pgbar(95, pb.Object, 'Printing Graphs')
#
# pull names vectors together
#
lbl <- "Welch's t Test Graphs"
lbl2 <- paste0(
"Measures the difference between signal and noise accounting for ",
"variation. Higher values indicate more separation.")
#
sn.plots.l <- (length(Slide_Descript) + 1)
lbl <- c(lbl, rep("Mean S/N Ratio Graphs",
ceiling(sn.plots.l/ 4)))
lbl <- c(lbl, rep("Median S/N Ratio Graphs",
ceiling(sn.plots.l/ 4)))
lbl2 <- c(lbl2, rep(paste0(
"Measures the difference between signal and noise using a simple ratio.",
" Higher values indicate more separation."),
2*ceiling(sn.plots.l/ 4)))
#
bx.plots.l <- (length(Slide_Descript))
lbl <- c(lbl, rep("Boxplots of Signal and Noise",
ceiling(bx.plots.l/ 4)))
lbl <- c(lbl, rep("Boxplots of 95th %-tile of Signal and 5th %-tile of Noise",
ceiling(bx.plots.l/ 4)))
lbl <- c(lbl, rep("Boxplots of 99th %-tile of Signal and 1st %-tile of Noise",
ceiling(bx.plots.l/ 4)))
lbl2 <- c(lbl2, rep(paste0(
'Measures the normalized flourescence intensity (NFI) or "counts" ',
'distribution of the signal and noise, these plots are useful to evaluate \n',
'the TSA dilution series. When optimizing a panel, balance the counts ',
'across the opals to establish accurate unmixing and prevent \n',
'crosstalk (bleedthrough) between opals. Values are computed from the ',
'thresholded signal and noise of all images across a case.'),
3*ceiling(bx.plots.l/ 4)))
#
plots <- c(tplots, sn.plots, bx.plots)
#
lbl.ihc <-  'IHC to IF Comparison Graph'
lbl2.ihc <- paste0(
'Compare the fraction of positivity of each IF dilution to the ',
'fraction of positivity from the IHC in order to determine when loss of ',
'signal occurs.'
)
#
glist <- list()
#
glist <- c(
glist,
mIFTO::m.grid.arrange(
ihc.plots,lbl.ihc,
lbl2.ihc, 3, 0, (ceiling(length(plots))/4 + 1)
)
)
glist <- c(
glist,
mIFTO::m.grid.arrange(
plots, lbl, lbl2, 1, 1, (ceiling(length(plots))/4 + 1)
)
)
gout <- gridExtra::marrangeGrob(grobs=glist,nrow=1,ncol=1,top=NULL)
#
str = paste0(wd,'/Results.pixels/stats/graphs/',
'Graphs for ', Antibody_Opal)
#
ggplot2::ggsave(paste0(str,'.pdf'),gout,
height = 9, width = 8.5, units = 'in', scale = 1, dpi = 300)
#
collbls[[1]] <- c('deepskyblue3'='Noise','red4'='Signal')
collbls[[2]] <- c('deepskyblue3'='5th %-tile','red4'='95th %-tile')
collbls[[3]] <- c('deepskyblue3'='1st %-tile','red4'='99th %-tile')
names(collbls) <- data.names
collbls <- list()
collbls[[1]] <- c('deepskyblue3'='Noise','red4'='Signal')
collbls[[2]] <- c('deepskyblue3'='5th %-tile','red4'='95th %-tile')
collbls[[3]] <- c('deepskyblue3'='1st %-tile','red4'='99th %-tile')
names(collbls) <- data.names
collbls
i1 = 'BoxPlot'
i1 = 'BoxPlots'
collbls[[i1]]
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
mIFTOapp()
devtools::load_all()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
devtools::load_all()
mIFTOapp()
mIFTOapp()
out <- list()
pb.Object <- winProgressBar(
title = "0% Complete", label = 'Thinking',
min = 0,max = 100, width = 500)
pb.count = 1
out <- list()
out$Slide_ID = 'T6,T7,T8'
out$Antibody <- 'PD1'
out$Opal1 <- '650'
out$Concentration <- '250,500,1000'
out$Thresholds <- '3,5,6,.22'
out$protocol.type <- '7color'
#
out$Vars_pxp <- c('ihc.Pixels')
out$Naming.convention<-TRUE
out$titration.type<-"Primary"
out$connected.pixels <- '1,1,1,1'
out$Polymer <- 'PV50'
devtools::load_all()
mIFTOapp()
mIFTOapp()
