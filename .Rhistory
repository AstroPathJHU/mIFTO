install.packages(c("fs", "openssl", "roxygen2"))
install.packages(c("fs", "roxygen2"))
devtools::install_github(
'beng1290/mIFTO', ref = 'MergeSxP_2'
)
mIFTO::mIFTOapp()
devtools::install_github(
'beng1290/mIFTO', ref = 'MergeSxP_2', force = T
)
mIFTO::map.and.write.histograms
mIFTO::mIFTOapp()
setwd('e:/code/R/mIFTO')
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
devtools::load_all()
mIFTO::mIFTOapp()
?useShinyalert
install.packages('shinyalert')
devtools::load_all()
mIFTO::mIFTOapp()
modal_out <- shinyalert::shinyalert(
title = "Warning",
text = paste(
"Antibody input is empty, enter a value for the",
"antibody or select 'Cancel' to exit."),
type = 'input',
showConfirmButton = TRUE,
showCancelButton = TRUE
)
modal_out
modal_out <- shinyalert::shinyalert(
title = "Warning",
text = paste(
"Antibody input is empty, enter a value for the",
"antibody or select 'Cancel' to exit."),
type = 'input',
showConfirmButton = TRUE,
showCancelButton = TRUE
)
modal_out
modal_out <- shinyalert::shinyalert(
title = "Antibody input is empty.",
text = paste(
"Please enter a value for the antibody input."),
type = 'error',
showConfirmButton = TRUE,
showCancelButton = TRUE
)
modal_out <- shinyalert::shinyalert(
title = "Antibody input is empty.",
text = paste(
"Please enter a value for the antibody input."),
type = 'warning',
showConfirmButton = TRUE
)
out$Antibody
warning(
'Slide Descriptors contain an illegal character this may cause issues')
message(
'Slide Descriptors contain an illegal character this may cause issues')
'Slide Descriptors contain an illegal character this may cause issues')
showNotification(
'Slide Descriptors contain an illegal character this may cause issues',
type = 'warning'
)
showNotification(
'Slide Descriptors contain an illegal character this may cause issues',
type = 'warning'
)
devtools::load_all()
devtools::load_all()
mIFTO::mIFTOapp()
shiny::showNotification(
'Slide Descriptors contain an illegal character this may cause issues',
type = 'warning')
n <- shiny::showNotification(
'Slide Descriptors contain an illegal character this may cause issues',
type = 'warning')
n <- shiny::showNotification(
'Slide Descriptors contain an illegal character this may cause issues',
type = 'warning')
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
outchecked$err.val != 0
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
err.val <- tryCatch({
Concentration1 <- as.numeric(unlist(strsplit(Concentration, split =',')))
}, warning = function(cond) {
modal_out <- shinyalert::shinyalert(
title = "Error in concentration input.",
text = paste(
"Concentration input:", Concentration, "not valid. Please enter a list",
"of numeric values."),
type = 'warning',
showConfirmButton = TRUE
)
return(4)
}, error = function(cond) {
modal_out <- shinyalert::shinyalert(
title = "Error in concentration input.",
text = paste(
"Concentration input:", Concentration, "not valid. Please enter a list",
"of numeric values."),
type = 'warning',
showConfirmButton = TRUE
)
return(5)
}
)
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
length(Concentration1) == 1
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
length(Concentration1) == 1
Concentration <- Concentration1
return(list(err.val = err.val))
if (length(Concentration1) == 1){
if (Concentration1 == -1){
return(list(err.val = 4))
}
}
err.val = err.val
err.val
list(err.val = err.val)
Concentration <- Concentration1
return(list(err.val = err.val))
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
devtools::load_all()
mIFTO::mIFTOapp()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
