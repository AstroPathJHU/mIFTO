ggplot2::geom_line(
size=.40, alpha=.65,ggplot2::aes(
color=factor(Slide.ID))) +
ggplot2::geom_errorbar(ggplot2::aes(
ymin = statistic - `sd.statistic`,ymax = `statistic`+`sd.statistic`,
color=factor(Slide.ID)),
width=length(Concentration)^(length(Concentration)/1.5),
size=.40, alpha=.65) +
ggplot2::labs(title=paste0(
"t Test statistics of ",zn,
'\n by Slide: ', Antibody_Opal.2),
x='Dilution (1: )',y='Statistic',color='Slide.ID') +
ggplot2::scale_color_manual(breaks=Slide_Descript,
labels=Slide_Descript,values=colors) +
ggplot2::scale_x_continuous(limits=Concentration) +
ggplot2::coord_cartesian(
xlim = xcoords,ylim = c(
round(min(Tables[['T.Tests']][[z]]
['statistic'])-75,digits = -2),
round(max(Tables[['T.Tests']][[z]]
['statistic'])+75,digits = -2)),expand = F) +
theme1 + ggplot2::theme(legend.position = c(.85,.77)) +
ggplot2::theme(
plot.margin = ggplot2::margin(t =10, r = 20, b = 10, l = 20, unit = "pt"))
p_count <- p_count + 1
}
z
str = paste0(
wd,'/Results.pixels/stats/Graphs/t test of ',
Antibody_Opal,' ',z,'.csv')
data.table::fwrite(Tables[['T.Tests']][[z]],file = str,sep = ',')
#
if (z == 'Plus1'){
zn <- 'ln(NFI + 1)'
} else {
zn <- 'ln(NFI + .001)'
}
#
# aggregate average t test
#
tbl = dplyr::summarize(dplyr::group_by(
Tables[['T.Tests']][[z]],Concentration),
sd.statistic = sd(statistic),
statistic = mean(statistic))
correction.val.name<-c('Plus1','Plus001')
p_count <- 1
plots<-vector('list',length(4))
#
xcoords<-c(
min(Concentration)-((min(Concentration))/2),
max(Concentration)+((min(Concentration))/2)
)
z
str = paste0(
wd,'/Results.pixels/stats/Graphs/t test of ',
Antibody_Opal,' ',z,'.csv')
data.table::fwrite(Tables[['T.Tests']][[z]],file = str,sep = ',')
zn <- 'ln(NFI + 1)'
tbl = dplyr::summarize(dplyr::group_by(
Tables[['T.Tests']][[z]],Concentration),
sd.statistic = sd(statistic),
statistic = mean(statistic))
plots[[p_count]]<-ggplot2::ggplot(
data=tbl,ggplot2::aes(x=Concentration,y=statistic)) +
ggplot2::geom_line(size=.40, alpha=.65, color = 'blue') +
ggplot2::geom_errorbar(
ggplot2::aes(
ymin = statistic - `sd.statistic`,
ymax = `statistic`+`sd.statistic`),
width=length(Concentration)^(length(Concentration)/1.5),
size=.40, alpha=.65,color = 'blue') +
ggplot2::labs(title=paste0(
"t Test statistics of ",zn,
'\n Averaged on Slides: ', Antibody_Opal.2),
x='Dilution (1: )',y='t Statistic') +
ggplot2::scale_color_manual(values=colors) +
ggplot2::scale_x_continuous(limits=Concentration) +
ggplot2::coord_cartesian(
xlim = xcoords,ylim = c(
round(min(Tables[['T.Tests']][[z]]
['statistic'])-75,digits = -2),
round(max(Tables[['T.Tests']][[z]]
['statistic'])+75,digits = -2)),expand = F) +
theme1 + ggplot2::theme(legend.position = c(.85,.77)) +
ggplot2::theme(
plot.margin = ggplot2::margin(t =10, r = 20, b = 10, l = 20, unit = "pt"))
#
# aggregate individual t test
#
p_count <- p_count + 1
tbl = dplyr::summarize(dplyr::group_by(
Tables[['T.Tests']][[z]],Concentration,Slide.ID),
sd.statistic = sd(statistic),statistic = mean(statistic))
#
# plot individual t test
#
plots[[p_count]]<-ggplot2::ggplot(
data=tbl,ggplot2::aes(x=Concentration,y=statistic,group=Slide.ID)) +
ggplot2::geom_line(
size=.40, alpha=.65,ggplot2::aes(
color=factor(Slide.ID))) +
ggplot2::geom_errorbar(ggplot2::aes(
ymin = statistic - `sd.statistic`,ymax = `statistic`+`sd.statistic`,
color=factor(Slide.ID)),
width=length(Concentration)^(length(Concentration)/1.5),
size=.40, alpha=.65) +
ggplot2::labs(title=paste0(
"t Test statistics of ",zn,
'\n by Slide: ', Antibody_Opal.2),
x='Dilution (1: )',y='Statistic',color='Slide.ID') +
ggplot2::scale_color_manual(breaks=Slide_Descript,
labels=Slide_Descript,values=colors) +
ggplot2::scale_x_continuous(limits=Concentration) +
ggplot2::coord_cartesian(
xlim = xcoords,ylim = c(
round(min(Tables[['T.Tests']][[z]]
['statistic'])-75,digits = -2),
round(max(Tables[['T.Tests']][[z]]
['statistic'])+75,digits = -2)),expand = F) +
theme1 + ggplot2::theme(legend.position = c(.85,.77)) +
ggplot2::theme(
plot.margin = ggplot2::margin(t =10, r = 20, b = 10, l = 20, unit = "pt"))
p_count <- p_count + 1
ggplot2::ggplot(
data=tbl,ggplot2::aes(x=Concentration,y=statistic)) +
ggplot2::geom_line(size=.40, alpha=.65, color = 'blue') +
ggplot2::geom_errorbar(
ggplot2::aes(
ymin = statistic - `sd.statistic`,
ymax = `statistic`+`sd.statistic`),
width=length(Concentration)^(length(Concentration)/1.5),
size=.40, alpha=.65,color = 'blue') +
ggplot2::labs(title=paste0(
"t Test statistics of ",zn,
'\n Averaged on Slides: ', Antibody_Opal.2),
x='Dilution (1: )',y='t Statistic') +
ggplot2::scale_color_manual(values=colors) +
ggplot2::scale_x_continuous(limits=Concentration) +
ggplot2::coord_cartesian(
xlim = xcoords,ylim = c(
round(min(Tables[['T.Tests']][[z]]
['statistic'])-75,digits = -2),
round(max(Tables[['T.Tests']][[z]]
['statistic'])+75,digits = -2)),expand = F) +
theme1 + ggplot2::theme(legend.position = c(.85,.77)) +
ggplot2::theme(
plot.margin = ggplot2::margin(t =10, r = 20, b = 10, l = 20, unit = "pt"))
#
# aggregate individual t test
#
p_count <- p_count + 1
tbl = dplyr::summarize(dplyr::group_by(
Tables[['T.Tests']][[z]],Concentration,Slide.ID),
sd.statistic = sd(statistic),statistic = mean(statistic))
#
# plot individual t test
#
plots[[p_count]]<-ggplot2::ggplot(
data=tbl,ggplot2::aes(x=Concentration,y=statistic,group=Slide.ID)) +
ggplot2::geom_line(
size=.40, alpha=.65,ggplot2::aes(
color=factor(Slide.ID))) +
ggplot2::geom_errorbar(ggplot2::aes(
ymin = statistic - `sd.statistic`,ymax = `statistic`+`sd.statistic`,
color=factor(Slide.ID)),
width=length(Concentration)^(length(Concentration)/1.5),
size=.40, alpha=.65) +
ggplot2::labs(title=paste0(
"t Test statistics of ",zn,
'\n by Slide: ', Antibody_Opal.2),
x='Dilution (1: )',y='Statistic',color='Slide.ID') +
ggplot2::scale_color_manual(breaks=Slide_Descript,
labels=Slide_Descript,values=colors) +
ggplot2::scale_x_continuous(limits=Concentration) +
ggplot2::coord_cartesian(
xlim = xcoords,ylim = c(
round(min(Tables[['T.Tests']][[z]]
['statistic'])-75,digits = -2),
round(max(Tables[['T.Tests']][[z]]
['statistic'])+75,digits = -2)),expand = F) +
theme1 + ggplot2::theme(legend.position = c(.85,.77)) +
ggplot2::theme(
plot.margin = ggplot2::margin(t =10, r = 20, b = 10, l = 20, unit = "pt"))
ggplot2::ggplot(
data=tbl,ggplot2::aes(x=Concentration,y=statistic)) +
ggplot2::geom_line(size=.40, alpha=.65, color = 'blue') +
ggplot2::geom_errorbar(
ggplot2::aes(
ymin = statistic - `sd.statistic`,
ymax = `statistic`+`sd.statistic`),
width=length(Concentration)^(length(Concentration)/1.5),
size=.40, alpha=.65,color = 'blue') +
ggplot2::labs(title=paste0(
"t Test statistics of ",zn,
'\n Averaged on Slides: ', Antibody_Opal.2),
x='Dilution (1: )',y='t Statistic') +
ggplot2::scale_color_manual(values=colors) +
ggplot2::scale_x_continuous(limits=Concentration) +
ggplot2::coord_cartesian(
xlim = xcoords,ylim = c(
round(min(Tables[['T.Tests']][[z]]
['statistic'])-75,digits = -2),
round(max(Tables[['T.Tests']][[z]]
['statistic'])+75,digits = -2)),expand = F) +
theme1 + ggplot2::theme(legend.position = c(.85,.77)) +
ggplot2::theme(
plot.margin = ggplot2::margin(t =10, r = 20, b = 10, l = 20, unit = "pt"))
#
# aggregate individual t test
#
p_count <- p_count + 1
tbl = dplyr::summarize(dplyr::group_by(
Tables[['T.Tests']][[z]],Concentration,Slide.ID),
sd.statistic = sd(statistic),statistic = mean(statistic))
#
# plot individual t test
#
plots[[p_count]]<-ggplot2::ggplot(
data=tbl,ggplot2::aes(x=Concentration,y=statistic,group=Slide.ID)) +
ggplot2::geom_line(
size=.40, alpha=.65,ggplot2::aes(
color=factor(Slide.ID))) +
ggplot2::geom_errorbar(ggplot2::aes(
ymin = statistic - `sd.statistic`,ymax = `statistic`+`sd.statistic`,
color=factor(Slide.ID)),
width=length(Concentration)^(length(Concentration)/1.5),
size=.40, alpha=.65) +
ggplot2::labs(title=paste0(
"t Test statistics of ",zn,
'\n by Slide: ', Antibody_Opal.2),
x='Dilution (1: )',y='Statistic',color='Slide.ID') +
ggplot2::scale_color_manual(breaks=Slide_Descript,
labels=Slide_Descript,values=colors) +
ggplot2::scale_x_continuous(limits=Concentration) +
ggplot2::coord_cartesian(
xlim = xcoords,ylim = c(
round(min(Tables[['T.Tests']][[z]]
['statistic'])-75,digits = -2),
round(max(Tables[['T.Tests']][[z]]
['statistic'])+75,digits = -2)),expand = F) +
theme1 + ggplot2::theme(legend.position = c(.85,.77)) +
ggplot2::theme(
plot.margin = ggplot2::margin(t =10, r = 20, b = 10, l = 20, unit = "pt"))
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
#
p1 <- list(ggplot2::ggplot() + ggplot2::theme_void())
#
lbl <- "Welch's t Test Graphs"
lbl2 <- paste0(
"Measures the difference between signal and noise accounting for ",
"variation. Higher values indicate more separation.")
#
sn.plots.l <- (length(Slide_Descript) + 1)
if ((sn.plots.l/4)%%1 == .25){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,p1,
sn.plots[sn.plots.l+1:length(sn.plots)],
p1, p1, p1)
} else if ((sn.plots.l/4)%%1 == .5){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,
sn.plots[sn.plots.l+1:length(sn.plots)],
p1, p1)
} else if ((sn.plots.l/4)%%1 == .75){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,
sn.plots[sn.plots.l+1:length(sn.plots)],
p1)
}
#
lbl <- c(lbl, rep("Mean S/N Ratio Graphs",
ceiling(sn.plots.l/ 4)))
lbl <- c(lbl, rep("Median S/N Ratio Graphs",
ceiling(sn.plots.l/ 4)))
lbl2 <- c(lbl2, rep(paste0(
"Measures the difference between signal and noise using a simple ratio.",
" Higher values indicate more separation."),
2*ceiling(sn.plots.l/ 4)))
#
plots <- c(tplots, sn.plots)
glist <- m.grid.arrange(plots, lbl, lbl2, 1, 0, ceiling(length(plots))/4)
plots <- c( sn.plots)
glist <- m.grid.arrange(plots, lbl, lbl2, 1, 0, ceiling(length(plots))/4)
plots <- c(tplots)
glist <- m.grid.arrange(plots, lbl, lbl2, 1, 0, ceiling(length(plots))/4)
View(tplots)
View(sn.plots)
sn.plots <- map.snratio.plots(
wd, Antibody_Opal, Slide_Descript,
Concentration, Tables$Tables.byimage, Antibody_Opal.snratio, theme1)
#
sn.plots.l <- (length(Slide_Descript) + 1)
(sn.plots.l/4)%%1
((sn.plots.l/4)%%1 == .75)
sn.plots.l <- (length(Slide_Descript) + 1)
if ((sn.plots.l/4)%%1 == .25){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,p1,
sn.plots[sn.plots.l+1:length(sn.plots)],
p1, p1, p1)
} else if ((sn.plots.l/4)%%1 == .5){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,
sn.plots[sn.plots.l+1:length(sn.plots)],
p1, p1)
} else if ((sn.plots.l/4)%%1 == .75){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,
sn.plots[sn.plots.l+1:length(sn.plots)],
p1)
}
sn.plots <- c(sn.plots[1:sn.plots.l], p1,
sn.plots[sn.plots.l+1:length(sn.plots)],
p1)
sn.plots <- map.snratio.plots(
wd, Antibody_Opal, Slide_Descript,
Concentration, Tables$Tables.byimage, Antibody_Opal.snratio, theme1)
#
sn.plots <- c(sn.plots[1:sn.plots.l], p1,
sn.plots[sn.plots.l+1:length(sn.plots)],
p1)
sn.plots <- map.snratio.plots(
wd, Antibody_Opal, Slide_Descript,
Concentration, Tables$Tables.byimage, Antibody_Opal.snratio, theme1)
#
sn.plots.l <- (length(Slide_Descript) + 1)
c(sn.plots[1:sn.plots.l], p1,
sn.plots[sn.plots.l+1:length(sn.plots)],
p1)
sn.plots.l
length(sn.plots)
sn.plots.l+1:length(sn.plots)
length(sn.plots)
3:5
sn.plots.l+1
(sn.plots.l+1):length(sn.plots)
sn.plots.l+1:length(sn.plots)
sn.plots.l <- (length(Slide_Descript) + 1)
if ((sn.plots.l/4)%%1 == .25){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1, p1, p1)
} else if ((sn.plots.l/4)%%1 == .5){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1, p1)
} else if ((sn.plots.l/4)%%1 == .75){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1)
}
c(sn.plots[1:sn.plots.l], p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1)
((sn.plots.l/4)%%1 == .75)
if ((sn.plots.l/4)%%1 == .25){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1, p1, p1)
} else if ((sn.plots.l/4)%%1 == .5){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1, p1)
} else if ((sn.plots.l/4)%%1 == .75){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1)
}
c(sn.plots[1:sn.plots.l], p1,p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1, p1)
c(sn.plots[1:sn.plots.l], p1,p1,p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1, p1, p1)
sn.plots.l <- (length(Slide_Descript) + 1)
if ((sn.plots.l/4)%%1 == .25){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1, p1, p1)
} else if ((sn.plots.l/4)%%1 == .5){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1, p1)
} else if ((sn.plots.l/4)%%1 == .75){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1)
}
p1 <- list(ggplot2::ggplot() + ggplot2::theme_void())
#
lbl <- "Welch's t Test Graphs"
lbl2 <- paste0(
"Measures the difference between signal and noise accounting for ",
"variation. Higher values indicate more separation.")
#
sn.plots.l <- (length(Slide_Descript) + 1)
if ((sn.plots.l/4)%%1 == .25){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1, p1, p1)
} else if ((sn.plots.l/4)%%1 == .5){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1, p1)
} else if ((sn.plots.l/4)%%1 == .75){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1)
}
#
sn.plots <- c(sn.plots[1:sn.plots.l], p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1)
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1, p1)
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1, p1, p1)
if ((sn.plots.l/4)%%1 == .25){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1, p1, p1)
}
if ((sn.plots.l/4)%%1 == .5){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1, p1)
}
if ((sn.plots.l/4)%%1 == .75){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1)
}
if ((sn.plots.l/4)%%1 == .25){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1, p1, p1)
} else if ((sn.plots.l/4)%%1 == .5){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1, p1)
} else if ((sn.plots.l/4)%%1 == .75){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1)
}
c(sn.plots[1:sn.plots.l], p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1)
sn.plots <- c(sn.plots[1:sn.plots.l], p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1)
sn.plots <- map.snratio.plots(
wd, Antibody_Opal, Slide_Descript,
Concentration, Tables$Tables.byimage, Antibody_Opal.snratio, theme1)
#
mIFTO::doupdate.pgbar(92, pb.Object, 'Generating t-Test Graphs')
#
tplots <- map.ttest.plots(
wd, Antibody_Opal, Slide_Descript,
Concentration, Tables$Tables.byimage, Antibody_Opal.ttest, theme1, colors)
#
# print some graphs
#
mIFTO::doupdate.pgbar(93, pb.Object, 'Printing Graphs')
#
# make sure ttests and sn ratios graphs types all appear on separate pages
#
p1 <- list(ggplot2::ggplot() + ggplot2::theme_void())
#
lbl <- "Welch's t Test Graphs"
lbl2 <- paste0(
"Measures the difference between signal and noise accounting for ",
"variation. Higher values indicate more separation.")
#
sn.plots.l <- (length(Slide_Descript) + 1)
if ((sn.plots.l/4)%%1 == .25){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1, p1, p1)
} else if ((sn.plots.l/4)%%1 == .5){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1, p1)
} else if ((sn.plots.l/4)%%1 == .75){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,
sn.plots[(sn.plots.l+1):length(sn.plots)],
p1)
}
sn.plots.l <- (length(Slide_Descript) + 1)
v1 <-sn.plots.l+1
if ((sn.plots.l/4)%%1 == .25){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,p1,
sn.plots[v1:length(sn.plots)],
p1, p1, p1)
} else if ((sn.plots.l/4)%%1 == .5){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,p1,
sn.plots[v1:length(sn.plots)],
p1, p1)
} else if ((sn.plots.l/4)%%1 == .75){
sn.plots <- c(sn.plots[1:sn.plots.l], p1,
sn.plots[v1:length(sn.plots)],
p1)
}
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
devtools::load_all()
mIFTO::mIFTOapp()
